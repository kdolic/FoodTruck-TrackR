[{"C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\index.js":"1","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\App.js":"2","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\reportWebVitals.js":"3","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\Login.js":"4","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\Home.js":"5","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\RegisterForm.js":"6","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\OperatorDashboard.js":"7","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\FoodTruck.js":"8","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\EditFoodTruck.js":"9","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\AddFoodTruck.js":"10","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\DinerDashboard.js":"11","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\dummyDataBrennan.js":"12"},{"size":633,"mtime":1609794392961,"results":"13","hashOfConfig":"14"},{"size":1548,"mtime":1610136331861,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":4237,"mtime":1610134140817,"results":"17","hashOfConfig":"14"},{"size":3460,"mtime":1609968391751,"results":"18","hashOfConfig":"14"},{"size":7390,"mtime":1610134859736,"results":"19","hashOfConfig":"14"},{"size":826,"mtime":1609965373289,"results":"20","hashOfConfig":"14"},{"size":1692,"mtime":1609965373088,"results":"21","hashOfConfig":"14"},{"size":7675,"mtime":1609965373006,"results":"22","hashOfConfig":"14"},{"size":7680,"mtime":1609965372557,"results":"23","hashOfConfig":"14"},{"size":6789,"mtime":1609965372841,"results":"24","hashOfConfig":"14"},{"size":3167,"mtime":1609965372935,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ilq11n",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\index.js",[],["54","55"],"C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\App.js",[],"C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\reportWebVitals.js",[],"C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\Login.js",[],"C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\Home.js",["56","57","58","59"],"import React from 'react'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Box,\r\n    Button,\r\n  } from '@material-ui/core/';\r\nimport MainLogo from '../images/Main Logo.png';\r\n\r\nimport diner from '../images/diner.png';\r\nimport truck from '../images/truck.png';\r\nimport { red } from '@material-ui/core/colors';\r\nimport Axios from 'axios';\r\nconst useStyles = makeStyles(theme => ({\r\ncontainer: {\r\n    margin: '60px auto',\r\n    border: '1px solid #d2d2d2',\r\n    boxShadow: '0px 1px 10px -2px #807f7f',\r\n    borderRadius: '20px',\r\n    backgroundColor: '#FFF9F0',\r\n    width: '100%',\r\n    '@media (max-width: 550px)': {\r\n        width: '90%',\r\n        height: 'auto', \r\n        marginBottom: '10%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        },\r\n    },\r\n  header: {\r\n    textAlign: 'center',\r\n    marginTop: '2%',\r\n    marginBottom: '5%',\r\n    '@media (max-width: 550px)': {\r\n      marginBottom: '10%',\r\n    },\r\n  },\r\n  h2: {\r\n    fontSize: '1.2rem',\r\n    marginTop: '2%',\r\n  },\r\n  nav: {\r\n    backgroundColor: 'black',\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    padding: '1%',\r\n    marginBottom: '5%',\r\n    '@media (max-width: 550px)': {\r\n      marginBottom: '10%',\r\n    },\r\n  },\r\n  responsive: {\r\n    '@media (max-width: 550px)': {\r\n      width: '30%',\r\n      height: 'auto', \r\n    },\r\n  },\r\n  button: {\r\n    width: '50%',\r\n    padding: '5% 60%',\r\n    marginTop: '60%',\r\n    backgroundImage: 'linear-gradient(#FFAD33, #BF8124)',\r\n    color: '#fff9f0',\r\n    '@media (max-width: 550px)': {\r\n        width: '25%',\r\n        height: 'auto', \r\n      },\r\n  },\r\n  footer: {\r\n    marginTop: '5%',\r\n    textAlign: 'center',\r\n  },\r\n}));\r\n\r\nfunction Home() {\r\n    const classes = useStyles();\r\n\r\n  const history = useHistory();\r\n\r\n  const routeToRegister = () => {\r\n    history.push('/register');\r\n  }\r\n\r\n    return (\r\n        <>\r\n        <div className={classes.container}>\r\n        <header className={classes.header}>\r\n            <Box className={classes.nav}>\r\n                <Link to='/' style={{ textDecoration: 'none', color: 'white', }}>FOODTRUCK TRACKR</Link>\r\n                <Link to='/' style={{ textDecoration: 'none', color: 'white' }}>Home</Link>\r\n            </Box>\r\n            <img src={MainLogo} alt={'foodtruck'} className={classes.responsive} />\r\n            <h2 className={classes.h2}>FoodTruck TrackR was designed to make finding and eating at a food truck fast, easy and fun.</h2>\r\n        </header>\r\n\r\n        <Box style={{display: 'flex', justifyContent: 'center'}}>\r\n            <Box style={{display: 'flex', flexDirection: 'column', margin: '5%', alignItems: 'center'}}>\r\n                <Box style={{marginBottom: '10%'}}><img src={diner} style={{height: '20vh'}} /></Box>\r\n                <Box><Button onClick={routeToRegister} className={classes.button}>Diner</Button></Box>\r\n            </Box>\r\n            <Box style={{display: 'flex', flexDirection: 'column', margin: '5%', alignItems: 'center'}}>\r\n                <Box style={{marginBottom: '0%'}}><img src={truck} style={{height: '20vh'}} /></Box>\r\n                <Box><Button onClick={routeToRegister} className={classes.button}>Operator</Button></Box>\r\n            </Box>\r\n        </Box>\r\n\r\n        <footer className={classes.footer}>Â© 2021 FOODTRUCK TRACKR. All rights  reserved.\r\n        </footer>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\RegisterForm.js",[],"C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\OperatorDashboard.js",[],"C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\FoodTruck.js",[],"C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\EditFoodTruck.js",["60","61","62","63"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router\";\n\nlet EditFoodTruck;\n\nEditFoodTruck = (props) => {\n  const itemID = useParams();\n  const id = itemID.itemID;\n  const truck = props.trucks[id];\n\n  let initialPhotoState = [];\n  for (let i = 0; i < truck.menu.length; i++) {\n    initialPhotoState.push(\"\");\n  }\n\n  const [currentTruck, setCurrentTruck] = useState(truck);\n  const [newMenuPhoto, setNewMenuPhoto] = useState([]);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const textInput = useRef(null);\n\n  useEffect(() => {\n    return setNewMenuPhoto(initialPhotoState);\n  }, []);\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    if (name === \"departureTime\") {\n      setCurrentTruck({\n        ...currentTruck,\n        currentLocation: { ...currentTruck.currentLocation, [name]: value },\n      });\n    } else if (\n      name === \"latitude\" ||\n      name === \"longitude\" ||\n      name === \"distortion\"\n    ) {\n      setCurrentTruck({\n        ...currentTruck,\n        currentLocation: {\n          ...currentTruck.currentLocation,\n          location: { ...currentTruck.currentLocation.location, [name]: value },\n        },\n      });\n    } else {\n      setCurrentTruck({ ...currentTruck, [name]: value });\n    }\n  };\n\n  const handleMenuChange = (index, event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    let updateMenu = currentTruck.menu;\n    updateMenu[index][name] = value;\n    setCurrentTruck({ ...currentTruck, menu: updateMenu });\n  };\n\n  const handleMenuPhotoEdit = (index, event, menuIndex) => {\n    event.preventDefault();\n    const { value } = event.target;\n    let updateMenu = currentTruck.menu;\n    updateMenu[menuIndex].itemPhotos[index] = value;\n    setCurrentTruck({ ...currentTruck, menu: updateMenu });\n  };\n\n  const handleMenuPhotoAdd = (index, event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    let updateNewMenuPhoto = newMenuPhoto;\n\n    console.log(updateNewMenuPhoto);\n\n    updateNewMenuPhoto[index] = value;\n    setNewMenuPhoto(newMenuPhoto);\n\n    console.log(newMenuPhoto);\n  };\n\n  const handleAddImage = (index, event) => {\n    event.preventDefault();\n    let updateMenu = currentTruck.menu;\n    console.log(textInput.current.form[22]);\n    updateMenu[index].itemPhotos.push(newMenuPhoto[index]);\n    setCurrentTruck({ ...currentTruck, menu: updateMenu });\n    setNewMenuPhoto(initialPhotoState);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    //Put request\n    window.location.href = \"/operator-dashboard\";\n  };\n\n  return (\n    <div>\n      <h3>Edit Truck</h3>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <h4>Basic Info</h4>\n          <label>\n            Truck Name\n            <input\n              type=\"text\"\n              name=\"truckName\"\n              placeholder=\"truck name\"\n              value={currentTruck.truckName}\n              onChange={handleChange}\n            />\n          </label>\n          <label>\n            Truck Image\n            <input\n              type=\"url\"\n              name=\"imageOfTruck\"\n              placeholder=\"image url\"\n              value={currentTruck.imageOfTruck}\n              onChange={handleChange}\n            />\n          </label>\n          <label>\n            Cuisine Type\n            <input\n              type=\"text\"\n              name=\"cuisineType\"\n              placeholder=\"cuisine type\"\n              value={currentTruck.cuisineType}\n              onChange={handleChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <h4>Current Location</h4>\n          <label>\n            Latitude\n            <input\n              type=\"text\"\n              name=\"latitude\"\n              placeholder=\"latitude\"\n              value={currentTruck.currentLocation.location.latitude}\n              onChange={handleChange}\n            />\n          </label>\n          <label>\n            Longitude\n            <input\n              type=\"text\"\n              name=\"longitude\"\n              placeholder=\"longitude\"\n              value={currentTruck.currentLocation.location.longitude}\n              onChange={handleChange}\n            />\n          </label>\n          <label>\n            Distortion\n            <input\n              type=\"text\"\n              name=\"distortion\"\n              placeholder=\"distortion\"\n              value={currentTruck.currentLocation.location.distortion}\n              onChange={handleChange}\n            />\n          </label>\n          <label>\n            Departure Time\n            <input\n              type=\"text\"\n              name=\"departureTime\"\n              placeholder=\"departure time\"\n              value={currentTruck.currentLocation.departureTime}\n              onChange={handleChange}\n            />\n          </label>\n        </div>\n        <div>\n          <h4>Menu</h4>\n          {currentTruck.menu.map((menuItem, index) => {\n            const menuIndex = index;\n            return (\n              <div key={index}>\n                <h5>Menu Item {index + 1}</h5>\n                <label>\n                  Item Name\n                  <input\n                    type=\"text\"\n                    name=\"itemName\"\n                    placeholder=\"item name\"\n                    value={menuItem.itemName}\n                    onChange={(event) => handleMenuChange(index, event)}\n                  />\n                </label>\n                <label>\n                  Item Description\n                  <input\n                    type=\"text\"\n                    name=\"itemDescription\"\n                    placeholder=\"item description\"\n                    value={menuItem.itemDescription}\n                    onChange={(event) => handleMenuChange(index, event)}\n                  />\n                </label>\n                <label>\n                  Item Price\n                  <input\n                    type=\"number\"\n                    name=\"itemPrice\"\n                    placeholder=\"item price $\"\n                    value={menuItem.itemPrice}\n                    onChange={(event) => handleMenuChange(index, event)}\n                  />\n                </label>\n                <div>\n                  <p>Images</p>\n                  {menuItem.itemPhotos.map((image, index) => {\n                    return (\n                      <input\n                        key={index}\n                        type=\"url\"\n                        name=\"itemPhotos\"\n                        placeholder=\"image url\"\n                        value={image}\n                        onChange={(event) =>\n                          handleMenuPhotoEdit(index, event, menuIndex)\n                        }\n                      />\n                    );\n                  })}\n                  <div>\n                    <input\n                      key={index}\n                      defaultValue=\"\"\n                      ref={textInput}\n                      type=\"url\"\n                      name=\"newMenuPhoto\"\n                      placeholder=\"image url\"\n                      //value={newMenuPhoto[index]}\n                      onChange={(event) => handleMenuPhotoAdd(index, event)}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={(event) => handleAddImage(index, event)}\n                    >\n                      Add Image\n                    </button>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <button>Save Changes</button>\n      </form>\n    </div>\n  );\n};\n\nexport default EditFoodTruck;\n","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\AddFoodTruck.js",["64","65","66"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router\";\n\nlet AddFoodTruck;\n\nconst initialTruckState = {\n  truckName: \"\",\n  imageOfTruck: \"\",\n  cuisineType: \"\",\n  customerRatings: [],\n  customerRatingAvg: \"\",\n  currentLocation: {\n    location: {\n      latitude: \"\",\n      longitude: \"\",\n      distortion: \"\",\n    },\n    departureTime: \"\",\n  },\n  menu: [\n    {\n      itemName: \"\",\n      itemDescription: \"\",\n      itemPhotos: [],\n      itemPrice: \"\",\n      customerRatings: [],\n      customerRatingAvg: \"\",\n    },\n  ],\n};\n\nAddFoodTruck = (props) => {\n  const [newTruck, setNewTruck] = useState(initialTruckState);\n  const [newMenuPhoto, setNewMenuPhoto] = useState([]);\n\n  const textInput = useRef();\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    if (name === \"departureTime\") {\n      setNewTruck({\n        ...newTruck,\n        currentLocation: { ...newTruck.currentLocation, [name]: value },\n      });\n    } else if (\n      name === \"latitude\" ||\n      name === \"longitude\" ||\n      name === \"distortion\"\n    ) {\n      setNewTruck({\n        ...newTruck,\n        currentLocation: {\n          ...newTruck.currentLocation,\n          location: { ...newTruck.currentLocation.location, [name]: value },\n        },\n      });\n    } else {\n      setNewTruck({ ...newTruck, [name]: value });\n    }\n  };\n\n  const handleMenuChange = (index, event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    let updateMenu = newTruck.menu;\n    updateMenu[index][name] = value;\n    setNewTruck({ ...newTruck, menu: updateMenu });\n  };\n\n  const handleMenuPhotoEdit = (index, event, menuIndex) => {\n    event.preventDefault();\n    const { value } = event.target;\n    let updateMenu = newTruck.menu;\n    updateMenu[menuIndex].itemPhotos[index] = value;\n    setNewTruck({ ...newTruck, menu: updateMenu });\n  };\n\n  const handleMenuPhotoAdd = (index, event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    let updateNewMenuPhoto = newMenuPhoto;\n\n    console.log(updateNewMenuPhoto);\n\n    updateNewMenuPhoto[index] = value;\n    setNewMenuPhoto(newMenuPhoto);\n\n    console.log(newMenuPhoto);\n  };\n\n  const handleAddImage = (index, event) => {\n    event.preventDefault();\n    let updateMenu = newTruck.menu;\n    console.log(textInput.current.form[22]);\n    updateMenu[index].itemPhotos.push(newMenuPhoto[index]);\n    setNewTruck({ ...newTruck, menu: updateMenu });\n    //setNewMenuPhoto(initialPhotoState);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    //Post request\n    window.location.href = \"/operator-dashboard\";\n  };\n\n  return (\n    <div>\n      <h3>Add New Truck</h3>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <h4>Basic Info</h4>\n          <label>\n            Truck Name\n            <input\n              type=\"text\"\n              name=\"truckName\"\n              placeholder=\"truck name\"\n              value={newTruck.truckName}\n              onChange={handleChange}\n            />\n          </label>\n          <label>\n            Truck Image\n            <input\n              type=\"url\"\n              name=\"imageOfTruck\"\n              placeholder=\"image url\"\n              value={newTruck.imageOfTruck}\n              onChange={handleChange}\n            />\n          </label>\n          <label>\n            Cuisine Type\n            <input\n              type=\"text\"\n              name=\"cuisineType\"\n              placeholder=\"cuisine type\"\n              value={newTruck.cuisineType}\n              onChange={handleChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <h4>Current Location</h4>\n          <label>\n            Latitude\n            <input\n              type=\"text\"\n              name=\"latitude\"\n              placeholder=\"latitude\"\n              value={newTruck.currentLocation.location.latitude}\n              onChange={handleChange}\n            />\n          </label>\n          <label>\n            Longitude\n            <input\n              type=\"text\"\n              name=\"longitude\"\n              placeholder=\"longitude\"\n              value={newTruck.currentLocation.location.longitude}\n              onChange={handleChange}\n            />\n          </label>\n          <label>\n            Distortion\n            <input\n              type=\"text\"\n              name=\"distortion\"\n              placeholder=\"distortion\"\n              value={newTruck.currentLocation.location.distortion}\n              onChange={handleChange}\n            />\n          </label>\n          <label>\n            Departure Time\n            <input\n              type=\"text\"\n              name=\"departureTime\"\n              placeholder=\"departure time\"\n              value={newTruck.currentLocation.departureTime}\n              onChange={handleChange}\n            />\n          </label>\n        </div>\n        <div>\n          <h4>Menu</h4>\n          {newTruck.menu.map((menuItem, index) => {\n            const menuIndex = index;\n            return (\n              <div key={index}>\n                <h5>Menu Item {index + 1}</h5>\n                <label>\n                  Item Name\n                  <input\n                    type=\"text\"\n                    name=\"itemName\"\n                    placeholder=\"item name\"\n                    value={menuItem.itemName}\n                    onChange={(event) => handleMenuChange(index, event)}\n                  />\n                </label>\n                <label>\n                  Item Description\n                  <input\n                    type=\"text\"\n                    name=\"itemDescription\"\n                    placeholder=\"item description\"\n                    value={menuItem.itemDescription}\n                    onChange={(event) => handleMenuChange(index, event)}\n                  />\n                </label>\n                <label>\n                  Item Price\n                  <input\n                    type=\"number\"\n                    name=\"itemPrice\"\n                    placeholder=\"item price $\"\n                    value={menuItem.itemPrice}\n                    onChange={(event) => handleMenuChange(index, event)}\n                  />\n                </label>\n                <div>\n                  <p>Images</p>\n                  {menuItem.itemPhotos.map((image, index) => {\n                    return (\n                      <input\n                        key={index}\n                        type=\"url\"\n                        name=\"itemPhotos\"\n                        placeholder=\"image url\"\n                        value={image}\n                        onChange={(event) =>\n                          handleMenuPhotoEdit(index, event, menuIndex)\n                        }\n                      />\n                    );\n                  })}\n                  <div>\n                    <input\n                      key={index}\n                      defaultValue=\"\"\n                      ref={textInput}\n                      type=\"url\"\n                      name=\"newMenuPhoto\"\n                      placeholder=\"image url\"\n                      //value={newMenuPhoto[index]}\n                      onChange={(event) => handleMenuPhotoAdd(index, event)}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={(event) => handleAddImage(index, event)}\n                    >\n                      Add Image\n                    </button>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <button>Save Changes</button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddFoodTruck;\n","C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\DinerDashboard.js",[],"C:\\Users\\Kenan Dolic\\Documents\\LambdaProjects\\FoodTruck-TrackR\\frontEnd\\src\\components\\dummyDataBrennan.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":12,"column":10,"nodeType":"73","messageId":"74","endLine":12,"endColumn":13},{"ruleId":"71","severity":1,"message":"75","line":13,"column":8,"nodeType":"73","messageId":"74","endLine":13,"endColumn":13},{"ruleId":"76","severity":1,"message":"77","line":98,"column":52,"nodeType":"78","endLine":98,"endColumn":96},{"ruleId":"76","severity":1,"message":"77","line":102,"column":51,"nodeType":"78","endLine":102,"endColumn":95},{"ruleId":"71","severity":1,"message":"79","line":18,"column":10,"nodeType":"73","messageId":"74","endLine":18,"endColumn":19},{"ruleId":"71","severity":1,"message":"80","line":18,"column":21,"nodeType":"73","messageId":"74","endLine":18,"endColumn":33},{"ruleId":"81","severity":1,"message":"82","line":24,"column":6,"nodeType":"83","endLine":24,"endColumn":8,"suggestions":"84"},{"ruleId":"71","severity":1,"message":"85","line":71,"column":13,"nodeType":"73","messageId":"74","endLine":71,"endColumn":17},{"ruleId":"71","severity":1,"message":"86","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"87","line":2,"column":10,"nodeType":"73","messageId":"74","endLine":2,"endColumn":19},{"ruleId":"71","severity":1,"message":"85","line":83,"column":13,"nodeType":"73","messageId":"74","endLine":83,"endColumn":17},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'red' is defined but never used.","Identifier","unusedVar","'Axios' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'isVisible' is assigned a value but never used.","'setIsVisible' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialPhotoState'. Either include it or remove the dependency array.","ArrayExpression",["90"],"'name' is assigned a value but never used.","'useEffect' is defined but never used.","'useParams' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [initialPhotoState]",{"range":"93","text":"94"},[636,638],"[initialPhotoState]"]